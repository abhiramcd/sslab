#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define BUFFER_SIZE 5
pthread_mutex_t mutex;
sem_t full, empty;
int buffer[BUFFER_SIZE],in,out;
pthread_t tid;
pthread_attr_t attr;
void initializeData()
{
pthread_mutex_init(&mutex, NULL);
sem_init(&full, 0, 0);
sem_init(&empty, 0, BUFFER_SIZE);
pthread_attr_init(&attr);
in = 0;
out = 0;
}
void *producer(void *p)
{
int item;
while(1)
{
sleep(1);
item = rand();
while((in+1)%BUFFER_SIZE==out);
sem_wait(&empty);
pthread_mutex_lock(&mutex);
buffer[in] = item;
in=(in+1)%BUFFER_SIZE;
printf("producer produced %d\n", item);
pthread_mutex_unlock(&mutex);
sem_post(&full);
}
}
void *consumer(void *c)
{
int item;
while(1)
{
sleep(2);
while(in==out);
sem_wait(&full);
pthread_mutex_lock(&mutex);
item=buffer[out];
out=(out+1)%BUFFER_SIZE;
printf(">consumer consumed %d\n", item);
pthread_mutex_unlock(&mutex);
sem_post(&empty);
}
}
int main()
{
initializeData();
pthread_create(&tid,&attr,producer,NULL);
sleep(2);
pthread_create(&tid,&attr,consumer,NULL);
pthread_join(tid,NULL);
return 0;
}
